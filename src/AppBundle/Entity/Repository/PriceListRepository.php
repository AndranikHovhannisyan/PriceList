<?php

namespace AppBundle\Entity\Repository;

/**
 * PriceListRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PriceListRepository extends \Doctrine\ORM\EntityRepository
{
    public function findWithRelations($ids)
    {
        if (!is_array($ids)){
            $ids = [$ids];
        }

        return $this->getEntityManager()
            ->createQuery("SELECT pl, plp, p, c
                           FROM AppBundle:PriceList pl
                           INDEX BY pl.id
                           JOIN pl.priceListProducts plp
                           JOIN plp.product p
                           LEFT JOIN pl.company c
                           WHERE pl.id IN (:ids)")
            ->setParameter('ids', $ids)
            ->getResult();
    }


    public function findQueryByUser($user, $startDate, $endDate)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT pl, plp, p, c
                           FROM AppBundle:PriceList pl
                           INDEX BY pl.id
                           JOIN pl.priceListProducts plp
                           JOIN plp.product p
                           LEFT JOIN pl.company c
                           WHERE (pl.user = :user OR :user IS NULL)
                               AND (pl.performDate >= :startDate OR :startDate IS NULL)
                               AND (pl.performDate <= :endDate OR :endDate IS NULL)
                           ORDER BY pl.id DESC")
            ->setParameter('user', $user)
            ->setParameter('startDate', $startDate)
            ->setParameter('endDate', $endDate);
    }

    public function findPriceListsTotal($priceListIds)
    {
        if (count($priceListIds) == 0){
            return [];
        }

        return $this->getEntityManager()
            ->createQuery("SELECT pl.id, SUM(p.price * plp.quantity * (100 - COALESCE(plp.discount, 0)) / 100) as total
                           FROM AppBundle:PriceList pl
                           INDEX BY pl.id
                           JOIN pl.priceListProducts plp
                           JOIN plp.product p
                           WHERE pl.id IN (:ids)
                           GROUP BY pl.id")
            ->setParameter('ids', $priceListIds)
            ->getResult();
    }

    public function findStatistic($userId, $companyId, $startDate, $endDate)
    {
        $startDate = $startDate ? $startDate . ' 00:00:00' : null;
        $endDate = $endDate ? $endDate . ' 23:59:59' : null;

        $result = $this->getEntityManager()
            ->createQuery("SELECT  p.id, p.name, p.price, plp.discount, SUM(plp.quantity) as quantity
                           FROM AppBundle:priceList pl
                           JOIN pl.priceListProducts plp
                           JOIN plp.product p
                           WHERE ((:company IS NOT NULL AND pl.company = :company) OR (:user IS NOT NULL AND pl.user = :user))
                           AND plp.quantity != 0
                           AND (pl.performDate >= :startDate OR :startDate IS NULL)
                           AND (pl.performDate <= :endDate OR :endDate IS NULL)
                           GROUP BY p.id, plp.discount
                           ORDER BY p.name")
            ->setParameter('user', $userId)
            ->setParameter('company', $companyId)
            ->setParameter('startDate', $startDate)
            ->setParameter('endDate', $endDate)
            ->getResult();

        $products = [];
        foreach($result as $data){
            if (!isset($products[$data['id']])){
                $products[$data['id']] = $data;
                $products[$data['id']]['quantity'] = $data['quantity'] . ($data['discount'] ? "(-{$data['discount']}%) " : ' ');
                $products[$data['id']]['calculatedPrice'] = 0;
                $products[$data['id']]['allQuantity'] = $data['quantity'];
                $products[$data['id']]['count'] = 1;
            }
            else {
                $products[$data['id']]['quantity'] .= '+ ' . $data['quantity'] . ($data['discount'] ? "(-{$data['discount']}%) " : ' ');
                $products[$data['id']]['allQuantity'] += $data['quantity'];
                $products[$data['id']]['count']++;
            }

            $products[$data['id']]['calculatedPrice'] += $data['price'] * $data['quantity'] * (100 - $data['discount']) / 100;
        }

        return $products;
    }
}
